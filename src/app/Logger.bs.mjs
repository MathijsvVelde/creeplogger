'use client';
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Games from "../helpers/Games.bs.mjs";
import * as React from "react";
import * as Players from "../helpers/Players.bs.mjs";
import * as UserGrid from "../components/UserGrid.bs.mjs";
import * as ScoreStep from "../components/ScoreStep.bs.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as Fonts from "../helpers/fonts";
import * as ConfirmationStep from "../components/ConfirmationStep.bs.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function Logger(props) {
  var players = Players.useAllPlayers(undefined, undefined);
  var match = React.useState(function () {
        
      });
  var setSelectedUsers = match[1];
  var selectedUsers = match[0];
  var match$1 = React.useState(function () {
        return "UserSelection";
      });
  var setStep = match$1[1];
  var match$2 = React.useState(function () {
        return -1;
      });
  var setRedState = match$2[1];
  var redState = match$2[0];
  var match$3 = React.useState(function () {
        return -1;
      });
  var setBlueState = match$3[1];
  var blueState = match$3[0];
  var match$4 = React.useState(function () {
        return 0;
      });
  var setEarnedPoints = match$4[1];
  var reset = function () {
    setStep(function (param) {
          return "UserSelection";
        });
    setSelectedUsers(function (param) {
          
        });
    setBlueState(function (param) {
          return -1;
        });
    setRedState(function (param) {
          return -1;
        });
    setEarnedPoints(function (param) {
          return 0;
        });
  };
  Games.getTimePeriod("Daily");
  var winnerTeam = redState > blueState ? "Red" : "Blue";
  var winners = Belt_MapString.keysToArray(Belt_MapString.keep(selectedUsers, (function (param, value) {
              return value === winnerTeam;
            })));
  var stepComponent;
  switch (match$1[0]) {
    case "UserSelection" :
        stepComponent = JsxRuntime.jsx(UserGrid.make, {
              selectedUsers: selectedUsers,
              setSelectedUsers: setSelectedUsers,
              reset: reset,
              setStep: setStep,
              players: players
            });
        break;
    case "ScoreForm" :
        stepComponent = JsxRuntime.jsx(ScoreStep.make, {
              selectedUsers: selectedUsers,
              setStep: setStep,
              reset: reset,
              blueState: blueState,
              setBlueState: setBlueState,
              redState: redState,
              setRedState: setRedState,
              setEarnedPoints: setEarnedPoints,
              players: players
            });
        break;
    case "Confirmation" :
        stepComponent = JsxRuntime.jsx(ConfirmationStep.make, {
              score: match$4[0],
              winners: winners,
              reset: reset,
              players: players
            });
        break;
    
  }
  return JsxRuntime.jsx("div", {
              children: stepComponent,
              className: "bg-blobs bg-darkbg bg-no-repeat bg-left text-white flex flex-col min-h-screen w-full"
            });
}

var make = Logger;

export {
  make ,
}
/*  Not a pure module */
