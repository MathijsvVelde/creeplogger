// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S$RescriptSchema from "rescript-schema/src/S.bs.mjs";

var Path = S$RescriptSchema.Path;

var Raised = S$RescriptSchema.Raised;

var $$Error = S$RescriptSchema.$$Error;

var Literal = S$RescriptSchema.Literal;

var never = S$RescriptSchema.never;

var unknown = S$RescriptSchema.unknown;

var unit = S$RescriptSchema.unit;

var string = S$RescriptSchema.string;

var bool = S$RescriptSchema.bool;

var $$int = S$RescriptSchema.$$int;

var $$float = S$RescriptSchema.$$float;

var bigint = S$RescriptSchema.bigint;

var json = S$RescriptSchema.json;

var literal = S$RescriptSchema.literal;

var array = S$RescriptSchema.array;

var list = S$RescriptSchema.list;

var dict = S$RescriptSchema.dict;

var option = S$RescriptSchema.option;

var $$null = S$RescriptSchema.$$null;

var nullable = S$RescriptSchema.nullable;

var jsonString = S$RescriptSchema.jsonString;

var union = S$RescriptSchema.union;

var $$enum = S$RescriptSchema.$$enum;

var Catch = S$RescriptSchema.Catch;

var $$catch = S$RescriptSchema.$$catch;

var describe = S$RescriptSchema.describe;

var description = S$RescriptSchema.description;

var deprecate = S$RescriptSchema.deprecate;

var deprecation = S$RescriptSchema.deprecation;

var transform = S$RescriptSchema.transform;

var preprocess = S$RescriptSchema.preprocess;

var custom = S$RescriptSchema.custom;

var refine = S$RescriptSchema.refine;

var variant = S$RescriptSchema.variant;

var to = S$RescriptSchema.to;

var compile = S$RescriptSchema.compile;

var parseWith = S$RescriptSchema.parseWith;

var parseAnyWith = S$RescriptSchema.parseAnyWith;

var parseJsonStringWith = S$RescriptSchema.parseJsonStringWith;

var parseOrRaiseWith = S$RescriptSchema.parseOrRaiseWith;

var parseAnyOrRaiseWith = S$RescriptSchema.parseAnyOrRaiseWith;

var parseAsyncWith = S$RescriptSchema.parseAsyncWith;

var parseAnyAsyncWith = S$RescriptSchema.parseAnyAsyncWith;

var convertAnyWith = S$RescriptSchema.convertAnyWith;

var convertAnyToJsonWith = S$RescriptSchema.convertAnyToJsonWith;

var convertAnyToJsonStringWith = S$RescriptSchema.convertAnyToJsonStringWith;

var convertAnyAsyncWith = S$RescriptSchema.convertAnyAsyncWith;

var reverseConvertWith = S$RescriptSchema.reverseConvertWith;

var reverseConvertToJsonWith = S$RescriptSchema.reverseConvertToJsonWith;

var reverseConvertToJsonStringWith = S$RescriptSchema.reverseConvertToJsonStringWith;

var serializeWith = S$RescriptSchema.serializeWith;

var serializeToUnknownWith = S$RescriptSchema.serializeToUnknownWith;

var serializeToJsonStringWith = S$RescriptSchema.serializeToJsonStringWith;

var serializeOrRaiseWith = S$RescriptSchema.serializeOrRaiseWith;

var serializeToUnknownOrRaiseWith = S$RescriptSchema.serializeToUnknownOrRaiseWith;

var serializeToJsonStringOrRaiseWith = S$RescriptSchema.serializeToJsonStringOrRaiseWith;

var assertOrRaiseWith = S$RescriptSchema.assertOrRaiseWith;

var assertAnyWith = S$RescriptSchema.assertAnyWith;

var assertWith = S$RescriptSchema.assertWith;

var isAsyncParse = S$RescriptSchema.isAsyncParse;

var isAsync = S$RescriptSchema.isAsync;

var recursive = S$RescriptSchema.recursive;

var classify = S$RescriptSchema.classify;

var setName = S$RescriptSchema.setName;

var removeTypeValidation = S$RescriptSchema.removeTypeValidation;

var unwrap = S$RescriptSchema.unwrap;

var Schema = S$RescriptSchema.Schema;

var schema = S$RescriptSchema.schema;

var $$Object = S$RescriptSchema.$$Object;

var object = S$RescriptSchema.object;

var Tuple = S$RescriptSchema.Tuple;

var tuple = S$RescriptSchema.tuple;

var tuple1 = S$RescriptSchema.tuple1;

var tuple2 = S$RescriptSchema.tuple2;

var tuple3 = S$RescriptSchema.tuple3;

var $$Option = S$RescriptSchema.$$Option;

var $$String = S$RescriptSchema.$$String;

var Int = S$RescriptSchema.Int;

var Float = S$RescriptSchema.Float;

var $$Array = S$RescriptSchema.$$Array;

var Metadata = S$RescriptSchema.Metadata;

var inline = S$RescriptSchema.inline;

var reverse = S$RescriptSchema.reverse;

var intMin = S$RescriptSchema.intMin;

var intMax = S$RescriptSchema.intMax;

var port = S$RescriptSchema.port;

var floatMin = S$RescriptSchema.floatMin;

var floatMax = S$RescriptSchema.floatMax;

var arrayMinLength = S$RescriptSchema.arrayMinLength;

var arrayMaxLength = S$RescriptSchema.arrayMaxLength;

var arrayLength = S$RescriptSchema.arrayLength;

var stringMinLength = S$RescriptSchema.stringMinLength;

var stringMaxLength = S$RescriptSchema.stringMaxLength;

var stringLength = S$RescriptSchema.stringLength;

var email = S$RescriptSchema.email;

var uuid = S$RescriptSchema.uuid;

var cuid = S$RescriptSchema.cuid;

var url = S$RescriptSchema.url;

var pattern = S$RescriptSchema.pattern;

var datetime = S$RescriptSchema.datetime;

var trim = S$RescriptSchema.trim;

var setGlobalConfig = S$RescriptSchema.setGlobalConfig;

export {
  Path ,
  Raised ,
  $$Error ,
  Literal ,
  never ,
  unknown ,
  unit ,
  string ,
  bool ,
  $$int ,
  $$float ,
  bigint ,
  json ,
  literal ,
  array ,
  list ,
  dict ,
  option ,
  $$null ,
  nullable ,
  jsonString ,
  union ,
  $$enum ,
  Catch ,
  $$catch ,
  describe ,
  description ,
  deprecate ,
  deprecation ,
  transform ,
  preprocess ,
  custom ,
  refine ,
  variant ,
  to ,
  compile ,
  parseWith ,
  parseAnyWith ,
  parseJsonStringWith ,
  parseOrRaiseWith ,
  parseAnyOrRaiseWith ,
  parseAsyncWith ,
  parseAnyAsyncWith ,
  convertAnyWith ,
  convertAnyToJsonWith ,
  convertAnyToJsonStringWith ,
  convertAnyAsyncWith ,
  reverseConvertWith ,
  reverseConvertToJsonWith ,
  reverseConvertToJsonStringWith ,
  serializeWith ,
  serializeToUnknownWith ,
  serializeToJsonStringWith ,
  serializeOrRaiseWith ,
  serializeToUnknownOrRaiseWith ,
  serializeToJsonStringOrRaiseWith ,
  assertOrRaiseWith ,
  assertAnyWith ,
  assertWith ,
  isAsyncParse ,
  isAsync ,
  recursive ,
  classify ,
  setName ,
  removeTypeValidation ,
  unwrap ,
  Schema ,
  schema ,
  $$Object ,
  object ,
  Tuple ,
  tuple ,
  tuple1 ,
  tuple2 ,
  tuple3 ,
  $$Option ,
  $$String ,
  Int ,
  Float ,
  $$Array ,
  Metadata ,
  inline ,
  reverse ,
  intMin ,
  intMax ,
  port ,
  floatMin ,
  floatMax ,
  arrayMinLength ,
  arrayMaxLength ,
  arrayLength ,
  stringMinLength ,
  stringMaxLength ,
  stringLength ,
  email ,
  uuid ,
  cuid ,
  url ,
  pattern ,
  datetime ,
  trim ,
  setGlobalConfig ,
}
/* S-RescriptSchema Not a pure module */
