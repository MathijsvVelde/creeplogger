// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.mjs";

function getTotalEloFromTeam(team, getEloFn) {
  return Core__Array.reduce(team, 0.0, (function (acc, creeper) {
                return acc + getEloFn(creeper);
              }));
}

function calculateScore(winners, losers, getEloFnOpt) {
  var getEloFn = getEloFnOpt !== undefined ? getEloFnOpt : (function (player) {
        return player.elo;
      });
  var totalEloA = getTotalEloFromTeam(winners, getEloFn);
  var totalEloB = getTotalEloFromTeam(losers, getEloFn);
  var countA = winners.length;
  var countB = losers.length;
  var max = countA > countB ? countA : countB;
  var mulA = countA === max ? max : 1.5;
  var mulB = countB === max ? max : 1.5;
  var avgA = totalEloA / mulA;
  var avgB = totalEloB / mulB;
  var losersScore = avgB;
  var winnersScore = avgA;
  var expectedScoreWinners = 1.0 / (1.0 + Math.pow(10.0, (losersScore - winnersScore) / 400.0));
  var expectedScoreLosers = 1.0 / (1.0 + Math.pow(10.0, (winnersScore - losersScore) / 400.0));
  var winners$1 = winners.map(function (creeper) {
        var change = 32.0 * (1.0 - expectedScoreWinners);
        var elo = getEloFn(creeper) + change;
        var newrecord = Caml_obj.obj_dup(creeper);
        newrecord.lastEloChange = change;
        newrecord.elo = elo;
        return newrecord;
      });
  var losers$1 = losers.map(function (creeper) {
        var change = 32.0 * (0.0 - expectedScoreLosers);
        var elo = getEloFn(creeper) + change;
        var newrecord = Caml_obj.obj_dup(creeper);
        newrecord.lastEloChange = change;
        newrecord.elo = elo;
        return newrecord;
      });
  return [
          winners$1,
          losers$1,
          32.0 * (1.0 - expectedScoreWinners)
        ];
}

function roundScore(score) {
  return Math.round(score) | 0;
}

export {
  calculateScore ,
  roundScore ,
}
/* No side effect */
